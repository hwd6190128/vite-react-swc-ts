// 此文件暫時停用，因為需要進一步完善 React Query 的模擬
// 更完整的測試需要對 React Query 的內部行為進行更精確的模擬 

import { renderHook, waitFor } from '@testing-library/react';
import { HttpClient } from '../../core/HttpClient';
import { useGet, usePost, usePut, useDelete, useFileUpload } from '../QueryHooks';
import { describe, test, expect, beforeEach, vi } from 'vitest';
import { QueryClient } from '@tanstack/react-query';

// Mock @tanstack/react-query
vi.mock('@tanstack/react-query', () => {
  return {
    QueryClient: vi.fn().mockImplementation(() => ({
      invalidateQueries: vi.fn(),
    })),
    useQuery: vi.fn().mockImplementation(({ queryKey, queryFn }) => {
      const mockState = {
        data: undefined,
        isLoading: false,
        isError: false,
        error: null,
        isSuccess: false,
        refetch: vi.fn(),
      };

      // Simulate the queryFn execution and state updates
      try {
        const result = queryFn();
        return {
          ...mockState,
          data: result, // The result from HttpClient.get
          isSuccess: true
        };
      } catch (error) {
        return {
          ...mockState,
          isError: true,
          error
        };
      }
    }),
    useMutation: vi.fn().mockImplementation(({ mutationFn, onSuccess, onError }) => {
      return {
        mutate: vi.fn(async (variables) => {
          try {
            const result = await mutationFn(variables);
            onSuccess?.(result);
            return result;
          } catch (error) {
            onError?.(error);
            throw error;
          }
        }),
        mutateAsync: vi.fn(async (variables) => {
          try {
            const result = await mutationFn(variables);
            onSuccess?.(result);
            return result;
          } catch (error) {
            onError?.(error);
            throw error;
          }
        }),
        isPending: false,
        isError: false,
        error: null,
        isSuccess: true,
        reset: vi.fn(),
        data: undefined
      };
    })
  };
});

// Mock HttpClient
vi.mock('../../core/HttpClient', () => ({
  default: {
    get: vi.fn(),
    post: vi.fn(),
    put: vi.fn(),
    delete: vi.fn(),
    uploadFile: vi.fn()
  },
  HttpClient: {
    get: vi.fn(),
    post: vi.fn(),
    put: vi.fn(),
    delete: vi.fn(),
    uploadFile: vi.fn()
  }
}));

describe('QueryHooks', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('useGet', () => {
    test('should fetch data successfully', async () => {
      const mockData = { id: 1, name: 'Test' };
      (HttpClient.get as any).mockResolvedValueOnce({ data: mockData });

      const { result } = renderHook(() => useGet<typeof mockData>('/users/1'));

      // Verify HTTP client was called
      expect(HttpClient.get).toHaveBeenCalledWith('/users/1', undefined, expect.any(Object));
    });

    test('should handle error correctly', async () => {
      const error = new Error('Failed to fetch');
      (HttpClient.get as any).mockRejectedValueOnce(error);
      
      const onError = vi.fn();
      renderHook(() => useGet<unknown>('/users/999', undefined, { onError }));
      
      // Verify error handling
      await waitFor(() => {
        expect(HttpClient.get).toHaveBeenCalledWith('/users/999', undefined, expect.any(Object));
      });
    });

    test('should pass query parameters', async () => {
      const mockData = [{ id: 1, name: 'User 1' }, { id: 2, name: 'User 2' }];
      (HttpClient.get as any).mockResolvedValueOnce({ data: mockData });
      
      const params = { page: 1, limit: 10 };
      renderHook(() => useGet<typeof mockData>('/users', params));
      
      expect(HttpClient.get).toHaveBeenCalledWith('/users', params, expect.any(Object));
    });
  });

  describe('usePost', () => {
    test('should post data successfully', async () => {
      const requestData = { name: 'New User', email: 'user@example.com' };
      const responseData = { id: 123, ...requestData };
      
      (HttpClient.post as any).mockResolvedValueOnce({ data: responseData });
      
      const { result } = renderHook(() => 
        usePost<typeof responseData, typeof requestData>('/users'));
      
      result.current.mutate(requestData);
      
      expect(HttpClient.post).toHaveBeenCalledWith('/users', requestData, expect.any(Object));
    });

    test('should call onSuccess callback when successful', async () => {
      const responseData = { id: 123, name: 'New User' };
      const onSuccess = vi.fn();
      
      (HttpClient.post as any).mockResolvedValueOnce({ data: responseData });
      
      const { result } = renderHook(() => 
        usePost<typeof responseData, { name: string }>('/users', { onSuccess }));
      
      await result.current.mutate({ name: 'New User' });
      
      expect(onSuccess).toHaveBeenCalled();
    });

    test('should call onError callback when failed', async () => {
      const error = new Error('Failed to create');
      const onError = vi.fn();
      
      (HttpClient.post as any).mockRejectedValueOnce(error);
      
      const { result } = renderHook(() => 
        usePost<unknown, { name: string }>('/users', { onError }));
      
      try {
        await result.current.mutate({ name: 'New User' });
      } catch (e) {
        // Expected error
      }
      
      expect(onError).toHaveBeenCalled();
    });
  });

  describe('usePut', () => {
    test('should update data successfully', async () => {
      const requestData = { name: 'Updated User' };
      const responseData = { id: 1, ...requestData };
      
      (HttpClient.put as any).mockResolvedValueOnce({ data: responseData });
      
      const { result } = renderHook(() => 
        usePut<typeof responseData, typeof requestData>('/users/1'));
      
      result.current.mutate(requestData);
      
      expect(HttpClient.put).toHaveBeenCalledWith('/users/1', requestData, expect.any(Object));
    });
  });

  describe('useDelete', () => {
    test('should delete data successfully', async () => {
      const responseData = { success: true };
      
      (HttpClient.delete as any).mockResolvedValueOnce({ data: responseData });
      
      const { result } = renderHook(() => useDelete<typeof responseData>('/users/1'));
      
      result.current.mutate();
      
      expect(HttpClient.delete).toHaveBeenCalledWith('/users/1', undefined, expect.any(Object));
    });

    test('should pass data when deleting', async () => {
      const requestData = { reason: 'User requested deletion' };
      const responseData = { success: true };
      
      (HttpClient.delete as any).mockResolvedValueOnce({ data: responseData });
      
      const { result } = renderHook(() => 
        useDelete<typeof responseData, typeof requestData>('/users/1'));
      
      result.current.mutate(requestData);
      
      expect(HttpClient.delete).toHaveBeenCalledWith('/users/1', requestData, expect.any(Object));
    });
  });

  describe('useFileUpload', () => {
    test('should upload file successfully', async () => {
      const file = new File(['test content'], 'test.txt', { type: 'text/plain' });
      const responseData = { fileUrl: 'https://example.com/uploads/test.txt' };
      
      (HttpClient.uploadFile as any).mockResolvedValueOnce({ data: responseData });
      
      const { result } = renderHook(() => useFileUpload<typeof responseData>('/upload'));
      
      result.current.upload(file);
      
      expect(HttpClient.uploadFile).toHaveBeenCalledWith('/upload', file, expect.any(Object));
    });

    test('should track upload progress', async () => {
      const file = new File(['test content'], 'test.txt', { type: 'text/plain' });
      const responseData = { fileUrl: 'https://example.com/uploads/test.txt' };
      const onProgress = vi.fn();
      
      (HttpClient.uploadFile as any).mockImplementation((url, file, options) => {
        // Simulate progress events
        if (options?.onUploadProgress) {
          options.onUploadProgress({ loaded: 50, total: 100 } as any);
          options.onUploadProgress({ loaded: 100, total: 100 } as any);
        }
        return Promise.resolve({ data: responseData });
      });
      
      const { result } = renderHook(() => 
        useFileUpload<typeof responseData>('/upload', { onProgress }));
      
      await result.current.upload(file);
      
      expect(onProgress).toHaveBeenCalledTimes(2);
      expect(onProgress).toHaveBeenNthCalledWith(1, expect.objectContaining({ 
        loaded: 50, 
        total: 100 
      }));
    });
  });
}); 